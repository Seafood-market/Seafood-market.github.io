<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>学习如何调用GPT-3 API实现翻译功能</title>
    <link href="/2023/03/14/%E5%AD%A6%E4%B9%A0%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8GPT-3-API%E5%AE%9E%E7%8E%B0%E7%BF%BB%E8%AF%91%E5%8A%9F%E8%83%BD/"/>
    <url>/2023/03/14/%E5%AD%A6%E4%B9%A0%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8GPT-3-API%E5%AE%9E%E7%8E%B0%E7%BF%BB%E8%AF%91%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="如何用python实现调用GPT-3-API来翻译文本"><a href="#如何用python实现调用GPT-3-API来翻译文本" class="headerlink" title="如何用python实现调用GPT-3 API来翻译文本"></a>如何用python实现调用GPT-3 API来翻译文本</h1><span id="more"></span>  <h2 id="首先-怎么调用API"><a href="#首先-怎么调用API" class="headerlink" title="首先!怎么调用API"></a>首先!怎么调用API</h2><p>在OpenAI官网获得API KEY<br>同时,如果要在Python中使用GPT-3 要安装openai这个库,安装命令是<code>pip install openai</code></p><p>接下来,我们要学习如何调用GPT-3, 以下代码我会详细解释: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> openai<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># 设置 API 密钥</span><br>openai.api_key = <span class="hljs-string">&quot;API KEY&quot;</span> <span class="hljs-comment"># 你从Open AI中获得的API KEY</span><br><br><span class="hljs-comment"># 翻译源文本和目标语言</span><br>text_to_translate = <span class="hljs-string">&quot;Hello, how are you?&quot;</span><br>target_language = <span class="hljs-string">&quot;zh_cn&quot;</span>  <span class="hljs-comment"># 翻译为简体中文</span><br><br><span class="hljs-comment"># 调用 GPT-3 API 进行翻译</span><br>response = openai.Completion.create(<br>    engine=<span class="hljs-string">&quot;text-davinci-002&quot;</span>,<br>    prompt=<span class="hljs-string">f&quot;translate &#x27;<span class="hljs-subst">&#123;text_to_translate&#125;</span>&#x27; to &#x27;<span class="hljs-subst">&#123;target_language&#125;</span>&#x27;&quot;</span>,<br>    max_tokens=<span class="hljs-number">100</span>,<br>)<br><br><span class="hljs-comment"># 处理响应</span><br><span class="hljs-keyword">if</span> response.choices:<br>    translated_text = response.choices[<span class="hljs-number">0</span>].text<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;翻译结果: <span class="hljs-subst">&#123;translated_text&#125;</span>&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;API 请求失败&quot;</span>)<br></code></pre></td></tr></table></figure><ol><li>我们利用<code>openai.api_key</code>方法来设置API KEY</li></ol><p>接下来看这段代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">response = openai.Completion.create(<br>    engine=<span class="hljs-string">&quot;text-davinci-002&quot;</span>,<br>    prompt=<span class="hljs-string">f&quot;translate &#x27;<span class="hljs-subst">&#123;text_to_translate&#125;</span>&#x27; to &#x27;<span class="hljs-subst">&#123;target_language&#125;</span>&#x27;&quot;</span>,<br>    max_tokens=<span class="hljs-number">100</span>,<br>)<br></code></pre></td></tr></table></figure><ol start="2"><li><code>openai.Completion.create()</code>：这是调用 GPT-3 API 的方法之一。它接受一个<strong>字典</strong>作为参数，其中包含 API 调用所需的所有信息。</li><li><code>engine</code>: 是指定要使用的 GPT-3 模型引擎。</li><li><code>prompt</code>: 指定要发送给 GPT-3 API 的输入文本。在这个例子中，我们使用 <code>f-string</code> 格式化字符串，将 <code>text_to_translate</code> 和 <code>target_language </code>的值插入到文本中，形成一个类似于<code>&quot;translate &#39;Hello, how are you?&#39; to &#39;zh_cn&#39;&quot;</code>的命令。GPT-3 API 会将这个命令解释为一个文本翻译请求，并返回翻译结果。</li><li><code>max_tokens</code>: 指定 API 响应的最大令牌数。令牌是 GPT-3 中的一个概念，可以简单地理解为文本的一部分。在这个例子中，我们将最大令牌数设置为 100，这意味着 API 响应将包含不超过 100 个令牌的翻译结果。</li></ol><p>理解了上面的这些,就理解了主要的核心代码</p><h2 id="为其添加GUI"><a href="#为其添加GUI" class="headerlink" title="为其添加GUI"></a>为其添加GUI</h2><p>让我们为程序添加一个简单的,基于tkinter库的GUI</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<br><span class="hljs-keyword">import</span> openai<br><br><span class="hljs-comment"># 设置 API 密钥</span><br>openai.api_key = <span class="hljs-string">&quot;Your API KEY&quot;</span> <span class="hljs-comment"># 这里设置ＡＰＩＫＥＹ</span><br><br><span class="hljs-comment"># 翻译文本的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">translate_text</span>():<br>    text = input_text.get(<span class="hljs-string">&quot;1.0&quot;</span>, <span class="hljs-string">&quot;end-1c&quot;</span>)<br>    target_lang = lang_var.get()<br>    prompt = <span class="hljs-string">f&quot;Translate &#x27;<span class="hljs-subst">&#123;text&#125;</span>&#x27; to <span class="hljs-subst">&#123;target_lang&#125;</span>.&quot;</span><br>    response = openai.Completion.create(engine=<span class="hljs-string">&quot;text-davinci-002&quot;</span>, prompt=prompt, max_tokens=<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">if</span> response[<span class="hljs-string">&quot;choices&quot;</span>]:<br>        completion_text = response[<span class="hljs-string">&quot;choices&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;text&quot;</span>]<br>        output_text.delete(<span class="hljs-string">&quot;1.0&quot;</span>, <span class="hljs-string">&quot;end&quot;</span>)<br>        output_text.insert(<span class="hljs-string">&quot;1.0&quot;</span>, completion_text)<br><br><span class="hljs-comment"># 创建 GUI 界面</span><br>root = tk.Tk()<br>root.title(<span class="hljs-string">&quot;文本翻译&quot;</span>)<br>root.geometry(<span class="hljs-string">&quot;500x300&quot;</span>)<br><br><span class="hljs-comment"># 创建输入文本框</span><br>input_text = tk.Text(root, height=<span class="hljs-number">5</span>)<br>input_text.pack()<br><br><span class="hljs-comment"># 创建下拉列表框用于选择语言</span><br>lang_list = [<span class="hljs-string">&quot;French&quot;</span>, <span class="hljs-string">&quot;German&quot;</span>, <span class="hljs-string">&quot;Spanish&quot;</span>,<span class="hljs-string">&quot;Chinese&quot;</span>,<span class="hljs-string">&quot;English&quot;</span>]<br>lang_var = tk.StringVar(root)<br>lang_var.<span class="hljs-built_in">set</span>(lang_list[<span class="hljs-number">0</span>])<br>lang_dropdown = tk.OptionMenu(root, lang_var, *lang_list)<br>lang_dropdown.pack()<br><br><span class="hljs-comment"># 创建翻译按钮</span><br>translate_button = tk.Button(root, text=<span class="hljs-string">&quot;翻译&quot;</span>, command=translate_text)<br>translate_button.pack()<br><br><span class="hljs-comment"># 创建输出文本框</span><br>output_text = tk.Text(root, height=<span class="hljs-number">5</span>)<br>output_text.pack()<br><br><span class="hljs-comment"># 运行 GUI 界面</span><br>root.mainloop()<br><br></code></pre></td></tr></table></figure><blockquote><p>关于这个代码的实现,不用多说了,大家应该都看得出来,详细可以查看我的<a href="https://github.com/Seafood-market/GPT-Translate">github仓库</a>,我会持续更新,并且丰富这个程序的功能以及美化.</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>chat_GPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的C语言学习记录EP2</title>
    <link href="/2023/03/10/%E6%88%91%E7%9A%84C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95EP2/"/>
    <url>/2023/03/10/%E6%88%91%E7%9A%84C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95EP2/</url>
    
    <content type="html"><![CDATA[<h2 id="数组与指针"><a href="#数组与指针" class="headerlink" title="数组与指针"></a>数组与指针</h2><ol><li><strong>数组名</strong>其实是数组第一个元素的<strong>地址</strong><span id="more"></span>  如何用一个指针指向数组:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> = a[];<br><br><span class="hljs-type">char</span> *p ;<br>p = a;<br><span class="hljs-comment">//上下两个语句等价</span><br>p = &amp;a[<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure></li><li>可以使用指针对数组进行间接访问<br>当指针指向数组元素的时候,可以对<strong>指针变量进行加减运算</strong>,这样做的意义在于<strong>指向距离指针所在位置向前或向后的第n个元素</strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> a[] = <span class="hljs-string">&quot;Acorn&quot;</span>;<br><span class="hljs-type">char</span> *pa = a;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*p = %c,*(p+1) = %c,*(p+2) = %c,&quot;</span>,*pa,*(pa+<span class="hljs-number">1</span>),*(pa+<span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure>结果:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">*p = A,*(p+<span class="hljs-number">1</span>) = c,*(p+<span class="hljs-number">2</span>) = o<br></code></pre></td></tr></table></figure>值得注意的是<br><code>p+1</code>并不是简单的将地址加一,而是<em><strong>指向</strong></em>数组的下一个元素<br>特别的:<br>如果是<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">double</span> d[] = &#123;<span class="hljs-number">1.1</span>,<span class="hljs-number">2.2</span>,<span class="hljs-number">3.3</span>,<span class="hljs-number">4.4</span>,<span class="hljs-number">5.5</span>&#125;;<br><span class="hljs-type">double</span> *pd = d;<br></code></pre></td></tr></table></figure>应该为<code>*(pd+n*8)</code></li></ol><hr><h2 id="指针与数组的区别"><a href="#指针与数组的区别" class="headerlink" title="指针与数组的区别"></a>指针与数组的区别</h2><p>以下代码会<strong>报错</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span> </span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> str[] = <span class="hljs-string">&quot;I Love Acorn&quot;</span>;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (*str != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>    &#123;<br>        count++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;总共有%d个字符&quot;</span>, count);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>原因:数组名只是是一个<strong>地址</strong>,而指针是一个<strong>左值</strong></p><h2 id="指针数组和数组指针"><a href="#指针数组和数组指针" class="headerlink" title="指针数组和数组指针"></a>指针数组和数组指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> *p[<span class="hljs-number">5</span>]; <span class="hljs-comment">// 指针数组</span><br><span class="hljs-type">int</span> (*p)[<span class="hljs-number">5</span>]; <span class="hljs-comment">// 数组指针</span><br></code></pre></td></tr></table></figure><ol><li>[[指针数组]]是一个数组,<strong>每个数组元素存放一个指针变量</strong></li><li>[[数组指针]]是一个指针,<strong>它指向的的是一个数组</strong><br><em>注意:以下是错误演示</em><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> *(p2)[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*(p2 + i));<br>    &#125; <br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><em>以下还是错误的</em><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> temp[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-type">int</span> *(p2)[<span class="hljs-number">5</span>] = temp;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*(p2 + i));<br>    &#125;<br><br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><em>正确演示</em><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span>  </span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> temp[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-type">int</span> (*p2)[<span class="hljs-number">5</span>] = &amp;temp;<br>    <span class="hljs-type">int</span> i;<br>  <br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*(*p2+i));<br>    &#125;<br><br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="指针与二维数组"><a href="#指针与二维数组" class="headerlink" title="指针与二维数组"></a>指针与二维数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">4</span>][<span class="hljs-number">5</span>];<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof int:%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;array address:%p\n&quot;</span>,<span class="hljs-built_in">array</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;array + 1:%p\n&quot;</span>,<span class="hljs-built_in">array</span> + <span class="hljs-number">1</span>);<br>    <br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">sizeof int:4<span class="hljs-built_in"></span><br><span class="hljs-built_in">array </span>address:000000000061FDD0<span class="hljs-built_in"></span><br><span class="hljs-built_in">array </span>+ 1:000000000061FDE4<br></code></pre></td></tr></table></figure><blockquote><p>从D0到E4,跨越了5个元素,说明<code>array</code>就是指向包含了5个元素的指针</p></blockquote><p><strong>那么<code>*(array+1) == array [1]</code></strong><br>实例演示:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">4</span>][<span class="hljs-number">5</span>];<br>    <span class="hljs-type">int</span> i,j,k = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++)<br>        &#123;<br>            <span class="hljs-built_in">array</span>[i][j] = k++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*(arrray +1):%p\n&quot;</span>,*(<span class="hljs-built_in">array</span> + <span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;array[1]:%p\n&quot;</span>,<span class="hljs-built_in">array</span>[<span class="hljs-number">1</span>]);<span class="hljs-comment">// 前一个的语法糖</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;array[1][0]:%p\n&quot;</span>,&amp;<span class="hljs-built_in">array</span>[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]); <span class="hljs-comment">// 第一个元素的地址,对比前两个</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;**(arrray +1):%d\n&quot;</span>,**(<span class="hljs-built_in">array</span> + <span class="hljs-number">1</span>));<br><br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">结果:</span><br><span class="hljs-comment">*(arrray +1):000000000061FDD4</span><br><span class="hljs-comment">array[1]:000000000061FDD4</span><br><span class="hljs-comment">&amp;array[1][0]:000000000061FDD4</span><br><span class="hljs-comment">**(arrray +1):5</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">猜想正确!!!</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>所以我们可以得出结论: <strong>*(*(array+i)+j) &#x3D;&#x3D; array[i][j]</strong></p><h2 id="数组指针与二维指针"><a href="#数组指针与二维指针" class="headerlink" title="数组指针与二维指针"></a>数组指针与二维指针</h2><p>啥也别说了,上代码!!!</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = &#123;<br>        &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,<br>        &#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>    &#125;;<br>    <span class="hljs-type">int</span> (*p)[<span class="hljs-number">3</span>] = <span class="hljs-built_in">array</span>;<br>  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;**(p+1):%d\n&quot;</span>,**(p+<span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;**(array+1):%d\n&quot;</span>,**(<span class="hljs-built_in">array</span>+<span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;array[1][0]:%d\n&quot;</span>,<span class="hljs-built_in">array</span>[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;------------------\n&quot;</span>);<br>  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*(*(p+1)+2):%d\n&quot;</span>,*(*(p+<span class="hljs-number">1</span>)+<span class="hljs-number">2</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*(*(array+1)+2):%d\n&quot;</span>,*(*(<span class="hljs-built_in">array</span>+<span class="hljs-number">1</span>)+<span class="hljs-number">2</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;array[1][2]:%d\n&quot;</span>,<span class="hljs-built_in">array</span>[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]);<br>  <br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>不难看出[[数组指针]]可以用(*p)[i] &#x3D; array</p>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>[object Object]</tag>
      
      <tag>C语言学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的C语言学习记录EP1</title>
    <link href="/2023/03/10/%E6%88%91%E7%9A%84C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95EP1/"/>
    <url>/2023/03/10/%E6%88%91%E7%9A%84C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95EP1/</url>
    
    <content type="html"><![CDATA[<h1 id="初见指针"><a href="#初见指针" class="headerlink" title="初见指针"></a>初见指针</h1><ol><li>普通变量存放的是数据，[指针]变量存放的是地址;<span id="more"></span>  </li><li>指针变量中存放的地址指向的内存单元的数据类型;</li><li>定义方法  <code>数据类型 *指针变量名</code></li><li>获取某个变量地址的运算符:  <code>数据类型 *指针变量名 = &amp;变量名</code></li><li>获取某个变量地址的运算符:  <code>数据类型 *指针变量名 = *变量名</code><br>举例:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> *pa = &amp;a; <br><span class="hljs-type">int</span> *pb = &amp;f; <span class="hljs-comment">//取地址</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c , %d\n&quot;</span> , *pa, *pb);<br></code></pre></td></tr></table></figure><em><strong>一定要避免创建访问未初始化的”野指针”</strong></em></li></ol>]]></content>
    
    
    <categories>
      
      <category>C语言学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>demo_0</title>
    <link href="/2023/03/10/demo-0/"/>
    <url>/2023/03/10/demo-0/</url>
    
    <content type="html"><![CDATA[<h1 id="这是我的第一个个人博客的第一个demo"><a href="#这是我的第一个个人博客的第一个demo" class="headerlink" title="这是我的第一个个人博客的第一个demo"></a>这是我的第一个个人博客的第一个demo</h1>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/03/10/hello-world/"/>
    <url>/2023/03/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
